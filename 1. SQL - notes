5 categories of queries
-----------------------
	DDL - Data Definition Language
		- deal with the structure of the table
		- create database, drop database, rename, create table, alter table, drop table
	DML - Data Manipulation Language
		- deal with the manipulation of the data
		- insert, update, delete
	DQL - Data Querying Language
		- deals with querying/fetching data from the DB
		- select
		- clauses of select query
			- select
			- from
			- where
			- group by
			- having
			- order by
	TCL - Transaction Control Language
		- deals with transaction in the DB
		- rollback, commit
	DCL - Data Control Language
		- deals with granting and revoking permissions to users
		create user devloper1 identified by 'dev1'; 
    		grant insert, update, delete, select on account to 'devloper1';
    		revoke drop, alter on account from 'devloper1';
		show grants for 'devloper1';
		 

constraints
-----------
	primary key - done
		- has to be unique
		- cannot hold null
		- are automatically indexed
		- enforces entity integrity
		- can I assign more than one column as primary key?
			- separately they cannot be assigned as primary keys
			- combined together they can be assigned and it is called as composite key

			student
			stud_id  stud_name
			101
			102

			course
			course_id  course_name
			5001		CSC
			5002		HR

			student_courses
			stud_id		course_id
			101		5001
			101		5002
			102		5002

			create table student_courses(
				stud_id integer,
				course_id integer,
				primary key(stud_id, course_id)
			);
	not null - done
	unique - done
	check - done
	default - done
	foreign key - done
		- enforces referential integrity
		- the 2 tables enter into a relation
		department
		----------
			dept_id(PK)
			dept_name
		employee
		---------
			emp_id(PK)
			emp_name
			emp_salary
			emp_dept_id(FK)

functions
---------
	- in built functions
		- in general functions can be classified into 2 types
			- scalar functions
				- ucase(), lcase(), left(), right(), substr(),...
				- sqrt(), pow(), floor(), ceil(),....
				- current_time(), current_date(), datediff(), day(), month(), year(),....
			- aggregate functions
				- count(), min(), max(), avg(), sum()
	- user defined functions
		- have to work with PL/SQL

group by
--------
	- find the total count of people
		select count(*) from person_details;
	- find the total count of people in each city
		select per_city, count(per_city) from person_details group by per_city;
	- find the average age of all the people - do not use age column
		select avg(datediff(current_date(), dob) div 365) as computed_age from person_details;
	- find the average age of all the people in each city - do not use age column
		select per_city, avg(datediff(current_date(), dob) div 365) as computed_age from person_details group by per_city;
	- find the total count of people in each city whose count is less than 3
		select per_city, count(per_city) from person_details group by per_city having count(per_city) < 3;

joins
------
	- inner join
	- left join/ left outter join
	- right join/ right outter join
	- full join/ full outer join
	- cross join
	- self join - uses inner join


relationship type between tables
----------------------------
one to one relation
	- the foreign key can be on any table which is in the relation
one to many relation
	- the foreign key will be in the many side table
many to one relation
	- the foreign key will be in the many side table
many to many relation
	- eg: book and author
		book---> book_id(pk), book_title, book_genre
		author---> author_id(pk), author_name
		book_author---> book_author_id(pk),book_id(fk), author_id(fk)

relationship direction between tables
--------------------------------------
unidirectional
bidirectional


normalization
-------------

	
	1st NF
	------
		- atomicity
	2nd NF
	------
		- table should be in 1NF and no partial dependicies
	book
		book_id(pk)
		book_title
		book_published
		book_price
	
	- always primary column should determine other non key columns
	- or in other words we can all non-key column should be functionaly dependant on the entire primary key/composite and should not be partially dependant
	eg:
	---
	customer_store
		(customer_id, store_id)(PK)
		customer_name
		customer_mobile
		store_city
	after 2 NF
	----------
	customer
		customer_id(PK)
		customer_name
		customer_mobile
	store
		store_id(PK)
		store_city
	customer_store
		(customer_id(FK),store_id(FK))(PK)
	
	3rd NF
	------
		- has to be in 2NF and no transitive dependencies

indexes
-------
    show tables;
    select * from person_details;
    create index idx_per_city on person_details(per_city);
    create unique index idx_per_mobile on person_details(per_mobile);
    desc person_details;
    alter table person_details drop index idx_per_mobile; 

    can I create a single index on multiple columns? - yes
    what is the use case? - when these multiple columns are used together in the where clause

